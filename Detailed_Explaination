Complete description of the working python game


### Importing the required Library###

import pygame --> This library is used for creating games. It handles graphics, sound, input and more
import random --> Used to generate random numbers for the maze generation and starting positions
import time --> used for time tracking (as ti be used in the code)
import sys --> used to exit the program when it's done


### Dimensions of the game window adn changing the colors within the game ###

WIDTH, HEIGHT = 1366, 768  --> The dimension of the game window
GRID_SIZE = 30  --> The size of each square cell in the ggrid 
MAZE_WIDTH, MAZE_HEIGHT = WIDTH // GRID_SIZE, HEIGHT // GRID_SIZE --> The number od cells in the maze (as the screen size of the game increases the difficulty of the game also increases)
BACKGROUND_COLOR = (0, 0, 0) --> cganges the color of the bckground to black
WALL_COLOR = (255, 255, 255) --> changes the wall color to white 
PATH_COLOR = (50, 50, 50) --> changes the path color to grey
PLAYER_COLOR = (255, 0, 0) --> changes the player color to red
EXIT_COLOR = (0, 0, 255) --> changes the exit color to blue
HINT_COLOR = (0, 255, 0) --> changes the hint color to green
FPS = 60 --> The numbe rof frames per second hence controlling the speed of the game


### Gameplay timing constants ###

TIME_LIMIT = 300  --> The maximum time for the game in which the game has to be finished
MOVE_TIMEOUT = 10.2  --> The delay in which the hints for the next step are provided 

### Directions for movement ###

DIRECTIONS = [(0, -1), (1, 0), (0, 1), (-1, 0)]   --> A list of 4 possible movements directions in the grid called the tuples, represented by (dx, dy) where 
              (0, -1) represents moving up
              (1, 0) represents moving right 
              (0, 1) represents moving down
              (-1, 0) represents moving left

### Maze generation ###

def generate_maze(): --> Defining to generate the maze
    maze = [[1] * MAZE_WIDTH for _ in range(MAZE_HEIGHT)] --> This function generates the maze using the DFS algorithm 

    def carve(x, y): --> This is a recursieve function that carves out the path in the game by changing the walls to paths, The directions are shuffled, and the function attempts to carve paths in each direction creatin a maze like structure 
          maze[y][x] = 0
          directions = DIRECTIONS.copy()
          random.shuffle(directions)
          for dx, dy in directions:
              nx, ny = x + dx * 2, y + dy * 2
              if 0 <= nx < MAZE_WIDTH and 0 <= ny < MAZE_HEIGHT and maze[ny][nx] == 1:
                  maze[ny][nx] = 0
                  maze[y + dy][x + dx] = 0
                  carve(nx, ny)


### Defining the gameplay ###

* Start point 
    start_x, start_y = random.randint(0, MAZE_WIDTH - 1), random.randint(0, MAZE_HEIGHT - 1) 
    carve(start_x, start_y) --> Randomly choses a starting point (start_x , start_y) and calls the carve function to generate the maze starting from that point 

* End point
    exit_x, exit_y = start_x, start_y
    while exit_x == start_x and exit_y == start_y:
        exit_x, exit_y = random.randint(0, MAZE_WIDTH - 1), random.randint(0, MAZE_HEIGHT - 1)

        if maze[exit_y][exit_x] != 0:
            exit_x, exit_y = start_x, start_y   --> Randomely selects the exit point (end_x, end_y) and ensures it is not the same as the starting point and also ensures that it lies on a valid path (maze[exit_y][exit_x] == 0)

    return maze, (start_x, start_y), (exit_x, exit_y)  --> Returns the generated maze and the positions of the start and exit points 


### Drawing the maze ### 

def draw_maze(maze, player_pos, exit_pos, screen):
    for y in range(MAZE_HEIGHT):
        for x in range(MAZE_WIDTH):
            color = WALL_COLOR if maze[y][x] == 1 else PATH_COLOR
            pygame.draw.rect(screen, color, (x * GRID_SIZE, y * GRID_SIZE, GRID_SIZE, GRID_SIZE))    -->Loops through each cell in the maze, drawing the white aquare for the walls and grey squares for the path 

    pygame.draw.rect(screen, PLAYER_COLOR, (player_pos[0] * GRID_SIZE, player_pos[1] * GRID_SIZE, GRID_SIZE, GRID_SIZE))
    pygame.draw.rect(screen, EXIT_COLOR, (exit_pos[0] * GRID_SIZE, exit_pos[1] * GRID_SIZE, GRID_SIZE, GRID_SIZE))    --> Draws the player as red square at their position and exit as blue square 


### Provising the hints ###

def provide_hint(player_pos, maze, screen):
    possible_moves = []
    for dx, dy in DIRECTIONS:
        nx, ny = player_pos[0] + dx, player_pos[1] + dy
        if 0 <= nx < MAZE_WIDTH and 0 <= ny < MAZE_HEIGHT and maze[ny][nx] == 0:
            possible_moves.append((nx, ny))     --> Checks all the possible moves from the player's current position. It only considers the moves valid, open cell paths 

    if possible_moves:
        next_move = random.choice(possible_moves)
        pygame.draw.rect(screen, HINT_COLOR, (next_move[0] * GRID_SIZE, next_move[1] * GRID_SIZE, GRID_SIZE, GRID_SIZE))   --> if there are valid moves then a random valid move is chosen, and a green square is drawn as a hint.


### Main Game ###

def main():
    pygame.init()
    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption("Maze Game with Hints")     --> Initiazises the pygame, creates the window with the specified dimensions, and sets the caption of the main window.
    clock = pygame.time.Clock()    --> a pygame clock objects used to control the frame rate

    maze, start_pos, exit_pos = generate_maze()    --> Generates the maze 
    player_pos = list(start_pos)
    last_move_time = time.time()   --> Tracks the time when the player last moved, typically used by is for the hin timing 
    start_time = time.time()   --> Tracks the start time for the time limit 

    running = True
    while running:
        screen.fill(BACKGROUND_COLOR)
        draw_maze(maze, player_pos, exit_pos, screen)   --> The main game loop starts, Here the screen is cleared and the maze is redrawn on each frame

        elapsed_time = time.time() - start_time
        if elapsed_time > TIME_LIMIT:
            print("Time's up!")
            running = False     --> Tracks the elapsed time. if the time exceeds the TIME_LIMIT, then Game Over (the game ends)

        if time.time() - last_move_time > MOVE_TIMEOUT:
            provide_hint(player_pos, maze, screen)   --> checks if the hint timeout has passed. if true then hint is provided. 
        
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False   --> This is a usefull task as it listens for the event like closing the game window

            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    new_pos = (player_pos[0] - 1, player_pos[1])
                elif event.key == pygame.K_RIGHT:
                    new_pos = (player_pos[0] + 1, player_pos[1])
                elif event.key == pygame.K_UP:
                    new_pos = (player_pos[0], player_pos[1] - 1)
                elif event.key == pygame.K_DOWN:
                    new_pos = (player_pos[0], player_pos[1] + 1)
                else:
                    continue    --> handles the player input via the arrow keys, based on the key pressed the plyer's position is updated 


                if 0 <= new_pos[0] < MAZE_WIDTH and 0 <= new_pos[1] < MAZE_HEIGHT and maze[new_pos[1]][new_pos[0]] == 0:
                    player_pos = new_pos
                    last_move_time = time.time()   --> if the new position is valid, then the player's position is updated 

        if player_pos == exit_pos:
            print("You win!")
            running = False   --> Check if the player has reached the exit, if true then print ("You Win!") and ends the game.

        pygame.display.flip()   --> updates the display 
        clock.tick(FPS)    -->  ensures the game runs at a specific frame rate as provided by us in the begining


### Game Termination ###

    pygame.quit()  --> quits program 
    sys.exit()    --> Exits the program


### Run the game ###

if __name__ == "__main__":
    main()    --> Starts the game when the script is ru directly 




##### Thanks for your time #####
